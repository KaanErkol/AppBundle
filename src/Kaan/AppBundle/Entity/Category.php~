<?php
namespace Kaan\DevBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * @ORM\Entity
 * @ORM\Table(name="category")
 */

class Category
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     *
     * @var integer $id
     */
    protected $id;
    /**
     * @ORM\Column(type="string",length=255,nullable=False)
     * @var string $name
     */
    protected $name;

    /**
     * @ORM\OneToMany(targetEntity="Barkod", mappedBy="Category")
     * @ORM\JoinColumn(name="barkod_id", referencedColumnName="id")
     */
    protected $barkod;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $created_at
     */
    protected $created_at;


    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    public $path;

    public $file;

    public function getAbsolutePath()
    {
        return null === $this->path
            ? null
            : $this->getUploadRootDir().'/'.$this->path;
    }

    public function getWebPath()
    {
        return null === $this->path
            ? null
            : $this->getUploadDir().'/'.$this->path;
    }

    protected function getUploadRootDir()
    {
        // the absolute directory path where uploaded
        // documents should be saved
        return __DIR__.'/../../../../web/'.$this->getUploadDir();
    }

    protected function getUploadDir()
    {
        // get rid of the __DIR__ so it doesn't screw up
        // when displaying uploaded doc/image in the view.
        return 'uploads';
    }

    public function upload()
    {
        // the file property can be empty if the field is not required
        if (null === $this->file) {
            return;
        }

        // use the original file name here but you should
        // sanitize it at least to avoid any security issues

        // move takes the target directory and then the
        // target filename to move to
        $this->file->move(
            $this->getUploadRootDir(),
            $this->file->getClientOriginalName()
        );

        // set the path property to the filename where you've saved the file
        $this->path = $this->file->getClientOriginalName();

        // clean up the file property as you won't need it anymore
        $this->file = null;
    }
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->barkod = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return Category
     */
    public function setName($name)
    {
        $this->name = $name;
    
        return $this;
    }

    /**
     * Get name
     *
     * @return string 
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set created_at
     *
     * @param \DateTime $createdAt
     * @return Category
     */
    public function setCreatedAt($createdAt)
    {
        $this->created_at = $createdAt;
    
        return $this;
    }

    /**
     * Get created_at
     *
     * @return \DateTime 
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }

    /**
     * Add barkod
     *
     * @param Kaan\DevBundle\Entity\Barkod $barkod
     * @return Category
     */
    public function addBarkod(\Kaan\DevBundle\Entity\Barkod $barkod)
    {
        $this->barkod[] = $barkod;
    
        return $this;
    }

    /**
     * Remove barkod
     *
     * @param Kaan\DevBundle\Entity\Barkod $barkod
     */
    public function removeBarkod(\Kaan\DevBundle\Entity\Barkod $barkod)
    {
        $this->barkod->removeElement($barkod);
    }

    /**
     * Get barkod
     *
     * @return Doctrine\Common\Collections\Collection 
     */
    public function getBarkod()
    {
        return $this->barkod;
    }
    public function __toString()
    {
        return $this->getName();
    }
}